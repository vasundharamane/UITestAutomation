package com.task.automation.util;

import java.util.Date;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import com.task.automation.core.BaseTestCase;

public class Email extends BaseTestCase{

	public static void sendEmail() {

		// Create object of Property file
		Properties props = new Properties();

		// this will set host of server- you can change based on your requirement 
		props.put("mail.smtp.host", "smtp.gmail.com");

		// set the port of socket factory 
		props.put("mail.smtp.socketFactory.port", "465");

		// set socket factory
		props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");

		// set the authentication to true
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("java.net.preferIPv4Stack", "true");

		// set the port of SMTP server
		props.put("mail.smtp.port", "465");

		// This will handle the complete authentication
		Session session = Session.getDefaultInstance(props,

				new javax.mail.Authenticator() {

					protected PasswordAuthentication getPasswordAuthentication() {

					return new PasswordAuthentication("sidharth.shukla19@gmail.com", "sh678");

					}

				});

		try {

			// Create object of MimeMessage class
			Message message = new MimeMessage(session);

			// Set the from address
			message.setFrom(new InternetAddress("Sidharth_Shukla"));

			// Set the recipient address
			message.setRecipients(Message.RecipientType.TO,InternetAddress.parse("sidharth.shukla19@gmail.com"));
            
                        // Add the subject link
			message.setSubject("UIAutomation_Execution_Status:Task");

			// Create object to add multimedia type content
			BodyPart messageBodyPart1 = new MimeBodyPart();

			// Set the body of email
			messageBodyPart1.setText("\r\n" + " Automation suite has been executed successfully !"+"\n"+"\n"+
					"DOWNLOAD THE ATTACHMENT and then open it for detailed execution report. "
					+"\n"+"\n"+ "!!!!!! DO NOT CLICK on the attachment directly for preview !!!!!!!"
					+ "\n"+"\n"+"\n"+"\n"+"********This is a autogenerated mail by automation suite execution********");

			// Create another object to add another content
			MimeBodyPart messageBodyPart2 = new MimeBodyPart();
			
		
			// Mention the file which you want to send
			String filename = System.getProperty("user.dir")+"/results/"+ BaseTestCase.TimeStamp+" Test_Automation.html";
			
			// Create data source and pass the filename
			DataSource source = new FileDataSource(filename);

			// set the handler
			messageBodyPart2.setDataHandler(new DataHandler(source));
			//messageBodyPart2.setContent("Kindly Download The Attachment To Get The Detailed Report","text/html");

			// set the file
			messageBodyPart2.setFileName("AutomationReport: " + BaseTestCase.TimeStamp+".html");

			// Create object of MimeMultipart class
			Multipart multipart = new MimeMultipart();

			// add body part 1
			multipart.addBodyPart(messageBodyPart2);

			// add body part 2
			multipart.addBodyPart(messageBodyPart1);

			// set the content
			message.setContent(multipart,"text/html");

			// finally send the email
			Transport.send(message);
			Thread.sleep(6000);

			System.out.println("=====Email Sent=====");

		} catch (Exception e) {
			System.out.println("Mail not sent");
			e.printStackTrace();
			System.out.println(e);
			

		}

	}

}

/*
<dependency>
<groupId>com.sun.mail</groupId>
<artifactId>javax.mail</artifactId>
<version>1.6.0</version>
</dependency>
1. Login to Gmail. 
2. Access the URL as https://www.google.com/settings/security/lesssecureapps 
3. Select "Turn on"
*/